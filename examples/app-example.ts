#!/usr/bin/env bun
/**
 * App Module Example (Enhanced)
 * Comprehensive demonstration of application lifecycle, configuration, and system integration
 * 
 * This example showcases:
 * - Application configuration and state management
 * - Environment variables and runtime configuration
 * - Process monitoring and system information
 * - Command-line argument parsing and handling
 * - Application lifecycle events
 * - Inter-process communication and broadcasting
 * - Development vs production environment handling
 * - Path management and directory structure
 */

import { app } from '../index';

interface AppExampleResult {
  section: string;
  success: boolean;
  data?: any;
  error?: Error;
}

class AppExampleRunner {
  private results: AppExampleResult[] = [];
  private originalConfig: any;
  private originalEnv: string | undefined;

  async runExample(): Promise<void> {
    console.log('üöÄ App Module - Complete Application Management Demo\n');
    console.log('üìã This example demonstrates enterprise-grade app configuration and monitoring');
    console.log('üéØ Learn how to build robust, configurable applications with proper lifecycle management\n');

    // Store original state for cleanup
    this.originalConfig = app.getConfig();
    this.originalEnv = app.getEnvironmentVariable('NODE_ENV');

    const sections = [
      { name: 'Configuration Management', icon: '‚öôÔ∏è', method: this.demoConfigurationManagement.bind(this) },
      { name: 'Environment & Runtime', icon: 'üåç', method: this.demoEnvironmentManagement.bind(this) },
      { name: 'Process Monitoring', icon: 'üìä', method: this.demoProcessMonitoring.bind(this) },
      { name: 'Command Line Interface', icon: 'üíª', method: this.demoCommandLineInterface.bind(this) },
      { name: 'System Information', icon: 'üñ•Ô∏è', method: this.demoSystemInformation.bind(this) },
      { name: 'Application Paths', icon: 'üìÅ', method: this.demoApplicationPaths.bind(this) },
      { name: 'Development Tools', icon: 'üîß', method: this.demoDevelopmentTools.bind(this) },
      { name: 'Inter-Process Communication', icon: 'üì°', method: this.demoIPC.bind(this) }
    ];

    for (const section of sections) {
      await this.runSection(section.name, section.icon, section.method);
    }

    this.displaySummary();
    await this.cleanup();
  }

  private async runSection(name: string, icon: string, method: () => Promise<void>): Promise<void> {
    console.log(`\n${'‚îÄ'.repeat(80)}`);
    console.log(`${icon} ${name}`);
    console.log(`${'‚îÄ'.repeat(80)}`);

    try {
      await method();
      this.results.push({ section: name, success: true });
      console.log(`‚úÖ ${name} demonstration completed successfully`);
    } catch (error) {
      this.results.push({ section: name, success: false, error: error as Error });
      console.error(`‚ùå Error in ${name}:`, error);
    }
  }

  private async demoConfigurationManagement(): Promise<void> {
    console.log('‚öôÔ∏è Application Configuration Management\n');

    // Show initial configuration
    const initialConfig = app.getConfig();
    console.log('üìã Initial Configuration:');
    console.log('   ', JSON.stringify(initialConfig, null, 2));

    // Demonstrate configuration updates
    const appConfigs = [
      {
        name: 'Development App',
        version: '1.0.0-dev',
        debug: true,
        features: { analytics: false, debugging: true },
        database: { host: 'localhost', port: 5432 }
      },
      {
        name: 'Production App',
        version: '1.0.0',
        debug: false,
        features: { analytics: true, debugging: false },
        database: { host: 'prod-db.example.com', port: 5432 }
      }
    ];

    console.log('\nüîÑ Configuration Updates:');
    for (const config of appConfigs) {
      app.setConfig(config);
      const updatedConfig = app.getConfig();
      console.log(`\n   üìù Set ${config.name} config:`);
      console.log(`      ‚Ä¢ Name: ${updatedConfig.name}`);
      console.log(`      ‚Ä¢ Version: ${updatedConfig.version}`);
      console.log(`      ‚Ä¢ Debug Mode: ${(updatedConfig as any).debug ? 'ON' : 'OFF'}`);
      console.log(`      ‚Ä¢ Database: ${(updatedConfig as any).database?.host}:${(updatedConfig as any).database?.port}`);
      console.log(`      ‚Ä¢ Features: ${Object.entries((updatedConfig as any).features || {}).map(([k, v]) => `${k}=${v}`).join(', ')}`);
    }

    // Demonstrate partial configuration updates
    console.log('\nüîß Partial Configuration Updates:');
    app.setConfig({ ...app.getConfig(), version: '1.1.0', ...(app.getConfig() as any).lastUpdated ? {} : { lastUpdated: new Date().toISOString() } } as any);
    console.log('   ‚úì Updated version and added timestamp');
    console.log('   üìå Final config name:', app.getConfig().name);
    console.log('   üìå Final config version:', app.getConfig().version);
  }

  private async demoEnvironmentManagement(): Promise<void> {
    console.log('üåç Environment Variables & Runtime Management\n');

    // Critical environment variables
    const criticalEnvVars = [
      'NODE_ENV',
      'PATH',
      'HOME',
      'USER',
      'SHELL',
      'PWD'
    ];

    console.log('üîç System Environment Analysis:');
    criticalEnvVars.forEach(varName => {
      const value = app.getEnvironmentVariable(varName);
      if (value) {
        const displayValue = varName === 'PATH' ? `${value.split(':').length} paths` : 
                            value.length > 50 ? `${value.substring(0, 47)}...` : value;
        console.log(`   ‚Ä¢ ${varName}: ${displayValue}`);
      } else {
        console.log(`   ‚Ä¢ ${varName}: (not set)`);
      }
    });

    // Application-specific environment variables
    console.log('\n‚öôÔ∏è Application Environment Setup:');
    const appEnvVars = {
      'BUN_MODULES_ENV': 'example',
      'BUN_MODULES_DEBUG': 'true',
      'BUN_MODULES_LOG_LEVEL': 'info',
      'BUN_MODULES_CACHE_TTL': '3600',
      'BUN_MODULES_API_URL': 'https://api.example.com'
    };

    Object.entries(appEnvVars).forEach(([key, value]) => {
      app.setEnvironmentVariable(key, value);
      const retrieved = app.getEnvironmentVariable(key);
      console.log(`   ‚úì Set ${key}: ${retrieved}`);
    });

    // Environment-based configuration
    console.log('\nüéØ Environment-Based Configuration:');
    const nodeEnv = app.getEnvironmentVariable('NODE_ENV') || 'development';
    console.log(`   üìç Current NODE_ENV: ${nodeEnv}`);
    
    // Simulate different environment configurations
    const environments = ['development', 'staging', 'production'];
    environments.forEach(env => {
      app.setEnvironmentVariable('NODE_ENV', env);
      console.log(`   üåç ${env.toUpperCase()} mode:`);
      console.log(`      ‚Ä¢ Development tools: ${app.isDevelopment() ? 'enabled' : 'disabled'}`);
      console.log(`      ‚Ä¢ Production optimizations: ${app.isProduction() ? 'enabled' : 'disabled'}`);
      console.log(`      ‚Ä¢ Debug logging: ${env === 'development' ? 'verbose' : 'minimal'}`);
    });
  }

  private async demoProcessMonitoring(): Promise<void> {
    console.log('üìä Process Monitoring & Performance Tracking\n');

    // Basic process information
    console.log('üîç Process Identity:');
    console.log(`   ‚Ä¢ Process ID: ${app.getProcessId()}`);
    console.log(`   ‚Ä¢ Parent Process ID: ${app.getParentProcessId()}`);
    console.log(`   ‚Ä¢ Runtime: ${app.getRuntimeVersion()}`);

    // Memory and performance monitoring
    console.log('\nüíæ Memory Usage Analysis:');
    const memoryUsage = app.getMemoryUsage();
    Object.entries(memoryUsage).forEach(([key, value]) => {
      const mb = typeof value === 'number' ? (value / 1024 / 1024).toFixed(2) : value;
      console.log(`   ‚Ä¢ ${key}: ${mb} MB`);
    });

    // CPU usage tracking
    console.log('\n‚ö° Performance Metrics:');
    const startTime = Date.now();
    const initialCpu = app.getCpuUsage();
    
    // Simulate some CPU work
    let workCounter = 0;
    for (let i = 0; i < 100000; i++) {
      workCounter += Math.sqrt(i);
    }
    
    const endTime = Date.now();
    const finalCpu = app.getCpuUsage();
    
    console.log(`   ‚Ä¢ Work completed: ${workCounter.toFixed(0)} operations`);
    console.log(`   ‚Ä¢ Execution time: ${endTime - startTime}ms`);
    console.log(`   ‚Ä¢ Initial CPU usage: ${JSON.stringify(initialCpu)}`);
    console.log(`   ‚Ä¢ Final CPU usage: ${JSON.stringify(finalCpu)}`);

    // Application uptime
    const uptime = app.getUptime();
    const uptimeMinutes = Math.floor(uptime / 60);
    const uptimeSeconds = (uptime % 60).toFixed(2);
    console.log(`\n‚è±Ô∏è Application Lifecycle:`);
    console.log(`   ‚Ä¢ Uptime: ${uptimeMinutes}m ${uptimeSeconds}s`);
    console.log(`   ‚Ä¢ Started at: ${new Date(Date.now() - uptime * 1000).toISOString()}`);
  }

  private async demoCommandLineInterface(): Promise<void> {
    console.log('üíª Command Line Interface & Argument Processing\n');

    // Raw command line arguments
    const rawArgs = app.getCommandLineArguments();
    console.log('üìù Raw Command Line Arguments:');
    rawArgs.forEach((arg, index) => {
      console.log(`   ${index}: "${arg}"`);
    });

    // Parsed arguments (assuming a basic parser)
    const parsedArgs = app.getParsedArguments();
    console.log('\nüîß Parsed Arguments:');
    console.log('   ', JSON.stringify(parsedArgs, null, 2));

    // Demonstrate different argument patterns
    console.log('\nüìã Argument Analysis:');
    const argTypes = {
      flags: rawArgs.filter(arg => arg.startsWith('--')),
      shortFlags: rawArgs.filter(arg => arg.startsWith('-') && !arg.startsWith('--')),
      values: rawArgs.filter(arg => !arg.startsWith('-')),
      script: rawArgs[0] || 'unknown'
    };

    console.log(`   ‚Ä¢ Script: ${argTypes.script}`);
    console.log(`   ‚Ä¢ Long flags (--): ${argTypes.flags.length ? argTypes.flags.join(', ') : 'none'}`);
    console.log(`   ‚Ä¢ Short flags (-): ${argTypes.shortFlags.length ? argTypes.shortFlags.join(', ') : 'none'}`);
    console.log(`   ‚Ä¢ Values: ${argTypes.values.length ? argTypes.values.slice(1).join(', ') : 'none'}`);

    // Command line help generation
    console.log('\nüìñ Example CLI Usage:');
    console.log('   bun run app-example.ts --env production --debug --port 3000');
    console.log('   bun run app-example.ts -e prod -d -p 8080');
    console.log('   bun run app-example.ts --config config.json --verbose');
  }

  private async demoSystemInformation(): Promise<void> {
    console.log('üñ•Ô∏è System Information & Environment Detection\n');

    const systemInfo = app.getSystemInfo();
    
    console.log('üíª System Overview:');
    console.log(`   ‚Ä¢ Platform: ${systemInfo.platform}`);
    console.log(`   ‚Ä¢ Architecture: ${systemInfo.arch}`);
    console.log(`   ‚Ä¢ OS Release: ${systemInfo.release}`);
    console.log(`   ‚Ä¢ Hostname: ${systemInfo.hostname || 'Unknown'}`);
    console.log(`   ‚Ä¢ Total Memory: ${(systemInfo.totalmem / 1024 / 1024 / 1024).toFixed(2)} GB`);

    // Platform-specific features
    console.log('\nüéØ Platform-Specific Features:');
    switch (systemInfo.platform) {
      case 'darwin':
        console.log('   üçé macOS Detected:');
        console.log('      ‚Ä¢ Clipboard integration available');
        console.log('      ‚Ä¢ Native notifications supported');
        console.log('      ‚Ä¢ Keychain access possible');
        break;
      case 'linux':
        console.log('   üêß Linux Detected:');
        console.log('      ‚Ä¢ Package manager integration');
        console.log('      ‚Ä¢ SystemD service support');
        console.log('      ‚Ä¢ Container deployment ready');
        break;
      case 'win32':
        console.log('   ü™ü Windows Detected:');
        console.log('      ‚Ä¢ Registry access available');
        console.log('      ‚Ä¢ Windows services support');
        console.log('      ‚Ä¢ PowerShell integration');
        break;
      default:
        console.log(`   ‚ùì Platform ${systemInfo.platform} detected`);
    }

    // Architecture-specific optimizations
    console.log('\n‚öôÔ∏è Architecture Optimizations:');
    switch (systemInfo.arch) {
      case 'x64':
        console.log('   ‚Ä¢ 64-bit optimizations enabled');
        console.log('   ‚Ä¢ Large memory space available');
        break;
      case 'arm64':
        console.log('   ‚Ä¢ ARM optimizations enabled');
        console.log('   ‚Ä¢ Energy-efficient processing');
        break;
      default:
        console.log(`   ‚Ä¢ Standard optimizations for ${systemInfo.arch}`);
    }
  }

  private async demoApplicationPaths(): Promise<void> {
    console.log('üìÅ Application Path Management & Directory Structure\n');

    const paths = {
      'Working Directory': app.getCurrentWorkingDirectory(),
      'Data Path': app.getDataPath(),
      'Config Path': app.getConfigPath(),
      'Log Path': app.getLogPath(),
      'Temp Path': app.getTempPath()
    };

    console.log('üìÇ Application Directories:');
    Object.entries(paths).forEach(([name, path]) => {
      console.log(`   ‚Ä¢ ${name}: ${path}`);
    });

    // Directory structure recommendations
    console.log('\nüèóÔ∏è Recommended Directory Structure:');
    console.log('   üìÅ project-root/');
    console.log('   ‚îú‚îÄ‚îÄ üìÅ config/          # Application configuration');
    console.log('   ‚îú‚îÄ‚îÄ üìÅ data/            # Application data storage');
    console.log('   ‚îú‚îÄ‚îÄ üìÅ logs/            # Log files');
    console.log('   ‚îú‚îÄ‚îÄ üìÅ temp/            # Temporary files');
    console.log('   ‚îú‚îÄ‚îÄ üìÅ cache/           # Cache storage');
    console.log('   ‚îî‚îÄ‚îÄ üìÅ uploads/         # User uploads');

    // Path utilities demonstration
    console.log('\nüîß Path Management Best Practices:');
    console.log('   ‚úì Use absolute paths for reliability');
    console.log('   ‚úì Respect OS-specific path conventions');
    console.log('   ‚úì Implement proper cleanup for temp files');
    console.log('   ‚úì Handle path permissions appropriately');
    console.log('   ‚úì Use environment variables for configuration');
  }

  private async demoDevelopmentTools(): Promise<void> {
    console.log('üîß Development Tools & Environment Detection\n');

    // Environment detection
    console.log('üåç Environment Detection:');
    console.log(`   ‚Ä¢ Development Mode: ${app.isDevelopment() ? '‚úÖ ENABLED' : '‚ùå DISABLED'}`);
    console.log(`   ‚Ä¢ Production Mode: ${app.isProduction() ? '‚úÖ ENABLED' : '‚ùå DISABLED'}`);

    // Development features
    if (app.isDevelopment()) {
      console.log('\nüõ†Ô∏è Development Features Available:');
      console.log('   ‚úì Hot reloading');
      console.log('   ‚úì Verbose error messages');
      console.log('   ‚úì Debug logging');
      console.log('   ‚úì Source maps');
      console.log('   ‚úì Development server');
    } else {
      console.log('\nüöÄ Production Optimizations:');
      console.log('   ‚úì Minified assets');
      console.log('   ‚úì Compressed responses');
      console.log('   ‚úì Error reporting');
      console.log('   ‚úì Performance monitoring');
      console.log('   ‚úì Security hardening');
    }

    // Configuration recommendations
    console.log('\n‚öôÔ∏è Configuration Recommendations:');
    const currentEnv = app.getEnvironmentVariable('NODE_ENV') || 'development';
    
    const recommendations = {
      development: [
        'Enable debug logging',
        'Use local databases',
        'Disable caching',
        'Enable hot reloading'
      ],
      staging: [
        'Mirror production config',
        'Enable performance profiling',
        'Use production-like data',
        'Test deployment procedures'
      ],
      production: [
        'Enable error reporting',
        'Configure monitoring',
        'Optimize for performance',
        'Enable security features'
      ]
    };

    console.log(`   üìã For ${currentEnv.toUpperCase()} environment:`);
    (recommendations[currentEnv as keyof typeof recommendations] || recommendations.development)
      .forEach(rec => console.log(`      ‚Ä¢ ${rec}`));
  }

  private async demoIPC(): Promise<void> {
    console.log('üì° Inter-Process Communication & Broadcasting\n');

    // Event broadcasting
    console.log('üì¢ Event Broadcasting:');
    
    const events = [
      { name: 'app-started', data: { timestamp: Date.now(), version: '1.0.0' } },
      { name: 'user-action', data: { action: 'click', target: 'button', userId: 'user123' } },
      { name: 'system-event', data: { type: 'memory-warning', level: 'warning' } },
      { name: 'custom-event', data: { message: 'Hello from example!', priority: 'high' } }
    ];

    events.forEach((event, index) => {
      console.log(`   üì§ Broadcasting event ${index + 1}: ${event.name}`);
      console.log(`      Data: ${JSON.stringify(event.data)}`);
      
      try {
        app.broadcast(event.name, event.data);
        console.log(`      ‚úÖ Successfully broadcasted`);
      } catch (error) {
        console.log(`      ‚ùå Broadcast failed: ${error}`);
      }
    });

    // IPC use cases
    console.log('\nüîó IPC Use Cases:');
    console.log('   ‚Ä¢ Multi-window applications');
    console.log('   ‚Ä¢ Worker process coordination');
    console.log('   ‚Ä¢ Real-time status updates');
    console.log('   ‚Ä¢ Event-driven architecture');
    console.log('   ‚Ä¢ Microservice communication');

    // Best practices
    console.log('\nüìã IPC Best Practices:');
    console.log('   ‚úì Use structured event names');
    console.log('   ‚úì Include timestamps in event data');
    console.log('   ‚úì Handle broadcasting errors gracefully');
    console.log('   ‚úì Implement event versioning');
    console.log('   ‚úì Monitor event queue performance');
  }

  private displaySummary(): void {
    const successCount = this.results.filter(r => r.success).length;
    const failureCount = this.results.filter(r => !r.success).length;

    console.log(`\n${'‚ïê'.repeat(80)}`);
    console.log('üìä APP MODULE DEMONSTRATION SUMMARY');
    console.log(`${'‚ïê'.repeat(80)}`);
    console.log(`üéØ Total Sections: ${this.results.length}`);
    console.log(`‚úÖ Successful: ${successCount}`);
    console.log(`‚ùå Failed: ${failureCount}`);
    console.log(`üìà Success Rate: ${((successCount / this.results.length) * 100).toFixed(1)}%`);

    if (failureCount > 0) {
      console.log(`\nüîç Failed Sections:`);
      this.results
        .filter(r => !r.success)
        .forEach(result => {
          console.log(`   ‚Ä¢ ${result.section}: ${result.error?.message}`);
        });
    }

    console.log(`\nüí° Key Features Demonstrated:`);
    console.log(`   ‚Ä¢ Complete application configuration management`);
    console.log(`   ‚Ä¢ Environment variable handling and runtime detection`);
    console.log(`   ‚Ä¢ Process monitoring and performance tracking`);
    console.log(`   ‚Ä¢ Command-line interface and argument processing`);
    console.log(`   ‚Ä¢ System information and platform detection`);
    console.log(`   ‚Ä¢ Application path management and directory structure`);
    console.log(`   ‚Ä¢ Development vs production environment handling`);
    console.log(`   ‚Ä¢ Inter-process communication and event broadcasting`);
    console.log(`${'‚ïê'.repeat(80)}\n`);
  }

  private async cleanup(): Promise<void> {
    // Restore original configuration
    if (this.originalConfig) {
      app.setConfig(this.originalConfig);
    }
    
    // Restore original NODE_ENV
    if (this.originalEnv) {
      app.setEnvironmentVariable('NODE_ENV', this.originalEnv);
    }
    
    console.log('üßπ Cleanup completed - original configuration restored');
  }
}

// Main execution
async function runAppExample(): Promise<void> {
  try {
    const runner = new AppExampleRunner();
    await runner.runExample();
  } catch (error) {
    console.error('‚ùå Fatal error in app example:', error);
    process.exit(1);
  }
}

if (import.meta.main) {
  await runAppExample();
}
